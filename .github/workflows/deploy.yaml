name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 30

    container:
      image: node:20-bullseye
      options: --privileged -v /var/run/docker.sock:/var/run/docker.sock

    env:
      MYSQL_USER: miage
      MYSQL_PASSWORD: JI25
      MYSQL_DATABASE: parrainage
      MYSQL_ROOT_PASSWORD: password

    steps:
      - name: üõ†Ô∏è R√©cup√©rer le code du d√©p√¥t
        uses: actions/checkout@v4

      - name: üîΩ Installer Docker et Docker Compose
        run: |
          apt-get update
          apt-get install -y docker.io curl
          curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          service docker start || true
          sleep 10

      - name: ‚úÖ V√©rifier l'installation
        run: |
          docker --version || exit 1
          docker-compose --version || exit 1
          node --version || exit 1
          npm --version || exit 1

      - name: üì¶ Installer les d√©pendances Node.js
        working-directory: ./src
        run: |
          npm ci
          npm list --depth=0

      - name: üöß Activer le mode maintenance
        run: |
          mkdir -p ./src
          touch ./src/maintenance.lock

      - name: üîß Appliquer les permissions
        run: |
          chown -R www-data:www-data ./src
          find ./src -type f -exec chmod 644 {} \;
          find ./src -type d -exec chmod 755 {} \;

      - name: üåê Configurer le r√©seau Docker
        run: docker network create my_network || true

      - name: üöÄ D√©ployer l'application
        run: |
          docker-compose down --remove-orphans
          docker-compose up -d --build --force-recreate

      - name: ‚è≥ Attendre que MySQL soit pr√™t
        run: |
          echo "Attente du d√©marrage de MySQL..."
          attempts=60
          until docker exec mysql_8 mysqladmin ping -h"localhost" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" --silent || [ $attempts -eq 0 ]; do
            echo "En attente de MySQL... ($attempts tentatives restantes)"
            attempts=$((attempts - 1))
            sleep 2
          done
          
          if [ $attempts -eq 0 ]; then
            echo "Timeout en attendant MySQL"
            exit 1
          fi
          
          echo "MySQL est pr√™t !"
      - name: üîß Configurer MySQL
        run: |
          docker exec mysql_8 mysql -uroot -p"$MYSQL_ROOT_PASSWORD" -e "
            SET GLOBAL log_bin_trust_function_creators = 1;
            GRANT ALL PRIVILEGES ON $MYSQL_DATABASE.* TO '$MYSQL_USER'@'%';
            FLUSH PRIVILEGES;
          "
      - name: üìå V√©rifier les conteneurs
        run: |
          docker ps -a
          docker logs mysql_8 --tail 50
          docker logs php_8-2 --tail 50
      - name: ‚úÖ V√©rification finale
        run: |
          docker exec mysql_8 mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "
            SELECT COUNT(*) as tables_count 
            FROM information_schema.tables 
            WHERE table_schema = '$MYSQL_DATABASE'
          "
          rm -f ./src/maintenance.lock