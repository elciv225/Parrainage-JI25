name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 30  # Évite un blocage infini du job

    container:
      image: node:20-bullseye
      options: --privileged -v /var/run/docker.sock:/var/run/docker.sock

    steps:
      - name: 🛠️ Récupérer le code du dépôt
        uses: actions/checkout@v3

      - name: 🔽 Installer Docker et Docker Compose
        run: |
          if ! command -v docker &> /dev/null; then
            echo "🚀 Installation de Docker..."
            apt update
            apt install -y docker.io
            systemctl start docker
            systemctl enable docker
          else
            echo "✅ Docker est déjà installé."
          fi
          
          if ! command -v docker-compose &> /dev/null; then
            echo "🚀 Installation de Docker Compose..."
            curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          else
            echo "✅ Docker Compose est déjà installé."
          fi

      - name: ✅ Vérifier l’installation de Docker et Docker Compose
        run: |
          docker -v
          docker-compose -v

      - name: 📦 Vérifier l'installation de Node.js et npm
        run: |
          node -v
          npm -v

      - name: 📦 Installer les dépendances Node.js
        run: |
          cd $GITHUB_WORKSPACE/src
          npm install
          ls -la node_modules

      - name: 🚧 Activer le mode maintenance
        run: touch $GITHUB_WORKSPACE/src/maintenance.lock

      - name: 🔧 Appliquer les permissions correctes
        run: |
          chmod -R 755 $GITHUB_WORKSPACE/src
          chown -R www-data:www-data $GITHUB_WORKSPACE/src

      - name: 🚀 Déployer l’application sur EC2
        run: |
          cd $GITHUB_WORKSPACE
          echo "📂 Dossier courant : $(pwd)"
          ls -la
          docker-compose up --build -d

      - name: 📌 Vérifier les conteneurs en cours d'exécution
        run: docker ps -a

      - name: 📝 Vérifier les logs Apache
        run: docker logs php_8-2 || echo "⚠️ Apache logs indisponibles."

      - name: 🔄 Redémarrer Apache
        run: docker exec php_8-2 apachectl restart || echo "⚠️ Impossible de redémarrer Apache."

      - name: 🔎 Vérifier si la base de données existe
        run: |
          docker exec -i mysql_8 mysql -u miage -pJI25 -e "SHOW DATABASES; USE parrainage; SHOW TABLES;"

      - name: 📂 Charger la base de données sans supprimer les utilisateurs
        run: |
          docker cp ./sql/parrainge.sql mysql_8:/parrainge.sql
          docker exec -i mysql_8 mysql -u miage -pJI25 parrainage < /parrainge.sql

      - name: 🔎 Vérifier à nouveau la base de données après import
        run: |
          docker exec -i mysql_8 mysql -u miage -pJI25 -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'parrainage';"

      - name: ✅ Désactiver le mode maintenance
        run: rm -f $GITHUB_WORKSPACE/src/maintenance.lock
