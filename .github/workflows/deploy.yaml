name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    timeout-minutes: 30

    container:
      image: node:20-bullseye
      options: --privileged -v /var/run/docker.sock:/var/run/docker.sock

    env:
      MYSQL_USER: miage
      MYSQL_PASSWORD: JI25
      MYSQL_DATABASE: parrainage
      MYSQL_ROOT_PASSWORD: password
      APACHE_RUN_USER: www-data
      APACHE_RUN_GROUP: www-data

    steps:
      - name: üõ†Ô∏è R√©cup√©rer le code du d√©p√¥t
        uses: actions/checkout@v4

      - name: üîΩ Installer Docker et Docker Compose
        run: |
          apt-get update
          apt-get install -y docker.io curl apache2-utils
          curl -L "https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          service docker start || true
          sleep 5

      - name: üîß Pr√©parer l'environnement
        run: |
          # S'assurer que le groupe docker existe
          groupadd -f docker
          # Ajouter l'utilisateur courant au groupe docker
          usermod -aG docker $USER || true
          # Cr√©er le groupe www-data s'il n'existe pas
          groupadd -f www-data
          # Cr√©er l'utilisateur www-data s'il n'existe pas
          id -u www-data &>/dev/null || useradd -r -g www-data www-data

      - name: üì¶ Installer les d√©pendances Node.js
        working-directory: ./src
        run: |
          npm ci
          npm list --depth=0

      - name: üîß Configurer les permissions
        run: |
          # Donner les permissions au dossier src
          mkdir -p ./src
          chown -R www-data:www-data ./src
          chmod -R 755 ./src
          
          # Donner les permissions au socket Docker
          chmod 666 /var/run/docker.sock
          
          # Cr√©er et configurer le dossier de logs Apache
          mkdir -p /var/log/apache2
          chown -R www-data:www-data /var/log/apache2
          chmod -R 755 /var/log/apache2

      - name: üåê Configurer le r√©seau Docker
        run: docker network create my_network || true

      - name: üõë Arr√™ter les conteneurs existants
        run: |
          docker-compose down --remove-orphans --volumes || true
          docker system prune -f

      - name: üöÄ D√©ployer l'application
        run: |
          # S'assurer que les images sont √† jour
          docker-compose pull
          
          # D√©marrer les services
          docker-compose up -d --build --force-recreate
          
          # Attendre que les conteneurs soient pr√™ts
          sleep 10
          
          # V√©rifier l'√©tat des conteneurs
          docker-compose ps

      - name: üîß Configurer Apache
        run: |
          docker exec php_8-2 bash -c '
            # Configurer les permissions d'Apache
            chown -R www-data:www-data /var/www/html
            chmod -R 755 /var/www/html
          
            # Activer les modules n√©cessaires
            a2enmod rewrite
          
            # Red√©marrer Apache
            service apache2 restart
          '

      - name: ‚è≥ Attendre que MySQL soit pr√™t
        run: |
          echo "Attente du d√©marrage de MySQL..."
          attempts=30
          until docker exec mysql_8 mysqladmin ping -h"localhost" -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" --silent || [ $attempts -eq 0 ]; do
            echo "En attente de MySQL... ($attempts tentatives restantes)"
            attempts=$((attempts - 1))
            sleep 2
          done
          
          if [ $attempts -eq 0 ]; then
            echo "Timeout en attendant MySQL"
            exit 1
          fi

      - name: üîç V√©rifier l'√©tat des services
        run: |
          echo "V√©rification de MySQL..."
          docker exec mysql_8 mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "SELECT 1"
          
          echo "V√©rification d'Apache..."
          docker exec php_8-2 apache2ctl -S
          
          echo "Logs des conteneurs:"
          docker-compose logs --tail=50

      - name: ‚úÖ V√©rification finale
        run: |
          echo "Test de connexion √† Apache..."
          curl -v http://localhost:8081/test || echo "Apache n'est pas accessible sur le port 8081"
          
          echo "Test de connexion √† MySQL..."
          docker exec mysql_8 mysql -u"$MYSQL_USER" -p"$MYSQL_PASSWORD" -e "
            SELECT COUNT(*) as tables_count 
            FROM information_schema.tables 
            WHERE table_schema = '$MYSQL_DATABASE'
          "